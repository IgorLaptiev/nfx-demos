
/* Auto generated by Glue Client Compiler tool (gluec) 
on 24.11.2015 22:54:30 at PC by 1
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Glue.Contracts.Services.GluedClients
{
  ///<summary>
  /// Client for glued contract Glue.Contracts.Services.IPersonService server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class PersonServiceClient : ClientEndPoint, @Glue.@Contracts.@Services.@IPersonService
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_Set_0;
     private static MethodSpec @s_ms_FindByName_1;

     //static .ctor
     static PersonServiceClient()
     {
         var t = typeof(@Glue.@Contracts.@Services.@IPersonService);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_Set_0 = new MethodSpec(t.GetMethod("Set", new Type[]{ typeof(@Glue.@Contracts.@DataContracts.@Person) }));
         @s_ms_FindByName_1 = new MethodSpec(t.GetMethod("FindByName", new Type[]{ typeof(@System.@String) }));
     }
  #endregion

  #region .ctor
     public PersonServiceClient(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public PersonServiceClient(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public PersonServiceClient(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public PersonServiceClient(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Glue.@Contracts.@Services.@IPersonService); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Glue.Contracts.Services.IPersonService.Set'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public void @Set(@Glue.@Contracts.@DataContracts.@Person  @person)
         {
            var call = Async_Set(@person);
            call.CheckVoidValue();
         }

         ///<summary>
         /// Asynchronous invoker for  'Glue.Contracts.Services.IPersonService.Set'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Set(@Glue.@Contracts.@DataContracts.@Person  @person)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Set_0, false, RemoteInstance, new object[]{@person});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'Glue.Contracts.Services.IPersonService.FindByName'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Collections.@Generic.@List<@Glue.@Contracts.@DataContracts.@Person>' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Collections.@Generic.@List<@Glue.@Contracts.@DataContracts.@Person> @FindByName(@System.@String  @pattern)
         {
            var call = Async_FindByName(@pattern);
            return call.GetValue<@System.@Collections.@Generic.@List<@Glue.@Contracts.@DataContracts.@Person>>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Glue.Contracts.Services.IPersonService.FindByName'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_FindByName(@System.@String  @pattern)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_FindByName_1, false, RemoteInstance, new object[]{@pattern});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
