
/* Auto generated by Glue Client Compiler tool (gluec) 
on 24.11.2015 18:03:34 at PC by 1
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace Glue.Contracts.Services.GluedClients
{
  ///<summary>
  /// Client for glued contract Glue.Contracts.Services.IEchoService server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class EchoServiceClient : ClientEndPoint, @Glue.@Contracts.@Services.@IEchoService
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_Echo_0;

     //static .ctor
     static EchoServiceClient()
     {
         var t = typeof(@Glue.@Contracts.@Services.@IEchoService);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_Echo_0 = new MethodSpec(t.GetMethod("Echo", new Type[]{ typeof(@System.@String) }));
     }
  #endregion

  #region .ctor
     public EchoServiceClient(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public EchoServiceClient(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public EchoServiceClient(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public EchoServiceClient(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@Glue.@Contracts.@Services.@IEchoService); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'Glue.Contracts.Services.IEchoService.Echo'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@String' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@String @Echo(@System.@String  @text)
         {
            var call = Async_Echo(@text);
            return call.GetValue<@System.@String>();
         }

         ///<summary>
         /// Asynchronous invoker for  'Glue.Contracts.Services.IEchoService.Echo'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Echo(@System.@String  @text)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Echo_0, false, RemoteInstance, new object[]{@text});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
